{"version":3,"file":"static/js/810.179f4bf4.chunk.js","mappings":"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","sources":["classes/ColorParser.ts","components/Frame/ContentExample/ContentExample.tsx","components/Frame/ContentBlock/ContentBlock.tsx","components/Frame/TextContent/TextContent.tsx","context/ScreenDimensionContext.tsx","hooks/useColorValidator.ts","hooks/useUtils.ts","components/ColorConverterPage/ColorFormatBlock/ColorFormatBlock.tsx","components/ColorConverterPage/ColorStrip/ColorStrip.tsx","components/ColorConverterPage/ColorPicker/ColorPicker.tsx","components/ColorConverterPage/AlphaChanger/AlphaChanger.tsx","pages/ColorConverter/ColorConverter.tsx"],"sourcesContent":["interface Color {\r\n  id: string;\r\n  toString(): string;\r\n  clamp(num: number, min: number, max: number): number;\r\n}\r\n\r\ninterface RGBColor extends Color {\r\n  red: number;\r\n  green: number;\r\n  blue: number;\r\n  alpha: number;\r\n}\r\n\r\ninterface HEXColor extends RGBColor {}\r\n\r\ninterface HSLColor extends Color {\r\n  hue: number;\r\n  saturation: number;\r\n  lightness: number;\r\n  alpha: number;\r\n}\r\ninterface CMYKColor extends Color {\r\n  cyan: number;\r\n  magenta: number;\r\n  yellow: number;\r\n  black: number;\r\n  alpha: number;\r\n}\r\n\r\nclass Color implements Color {\r\n  clamp(num: number, min: number, max: number): number {\r\n    return Math.min(Math.max(num, min), max);\r\n  }\r\n  toString(): string {\r\n    return \"\";\r\n  }\r\n}\r\n\r\nclass RGBColor extends Color implements RGBColor {\r\n  constructor(red: number, green: number, blue: number, alpha: number = 1) {\r\n    super();\r\n    this.red = this.clamp(red, 0, 255);\r\n    this.green = this.clamp(green, 0, 255);\r\n    this.blue = this.clamp(blue, 0, 255);\r\n    this.alpha = this.clamp(alpha, 0, 1);\r\n  }\r\n  toString(): string {\r\n    const { red, green, blue, alpha } = this;\r\n    if (alpha !== 1) {\r\n      return `rgba(${red},${green},${blue},${alpha})`;\r\n    } else {\r\n      return `rgb(${red},${green},${blue})`;\r\n    }\r\n  }\r\n  get components(): number[] {\r\n    const { red, green, blue, alpha } = this;\r\n    return [red, green, blue, alpha];\r\n  }\r\n}\r\n\r\nclass HEXColor extends RGBColor implements HEXColor {\r\n  constructor(red: number, green: number, blue: number, alpha: number = 1) {\r\n    super(red, green, blue, alpha);\r\n  }\r\n  toString(): string {\r\n    const { red, green, blue, alpha } = this;\r\n\r\n    let hex = \"#\";\r\n    for (let i of [red, green, blue]) {\r\n      let parsed = i.toString(16);\r\n      if (parsed.length === 1) {\r\n        parsed = parsed.padStart(2, \"0\");\r\n      }\r\n      hex += parsed;\r\n    }\r\n\r\n    if (alpha && alpha !== 1) {\r\n      let parsed = parseInt((this.alpha * 255).toString()).toString(16);\r\n      if (parsed.length === 1) {\r\n        parsed = parsed.padStart(2, \"0\");\r\n      }\r\n      hex += parsed;\r\n    }\r\n\r\n    return hex;\r\n  }\r\n}\r\n\r\nclass HSLColor extends Color implements HSLColor {\r\n  constructor(\r\n    hue: number,\r\n    saturation: number,\r\n    lightness: number,\r\n    alpha: number = 1\r\n  ) {\r\n    super();\r\n    this.hue = this.clamp(hue, 0, 360);\r\n    this.saturation = this.clamp(saturation, 0, 100);\r\n    this.lightness = this.clamp(lightness, 0, 100);\r\n    this.alpha = this.clamp(alpha, 0, 1);\r\n  }\r\n\r\n  toString(): string {\r\n    const { hue, saturation, lightness, alpha } = this;\r\n\r\n    if (alpha !== 1) {\r\n      return `hsla(${hue}deg,${saturation}%,${lightness}%,${parseInt(\r\n        (alpha * 100).toString()\r\n      )}%)`;\r\n    } else {\r\n      return `hsl(${hue}deg,${saturation}%,${lightness}%)`;\r\n    }\r\n  }\r\n\r\n  get components(): number[] {\r\n    const { hue, saturation, lightness, alpha } = this;\r\n    return [hue, saturation, lightness, alpha];\r\n  }\r\n}\r\n\r\nclass CMYKColor extends Color implements CMYKColor {\r\n  constructor(\r\n    cyan: number,\r\n    magenta: number,\r\n    yellow: number,\r\n    black: number,\r\n    alpha: number = 1\r\n  ) {\r\n    super();\r\n    this.cyan = this.clamp(cyan, 0, 100);\r\n    this.magenta = this.clamp(magenta, 0, 100);\r\n    this.yellow = this.clamp(yellow, 0, 100);\r\n    this.black = this.clamp(black, 0, 100);\r\n    this.alpha = this.clamp(alpha, 0, 1);\r\n  }\r\n  toString(): string {\r\n    const { cyan, magenta, yellow, black } = this;\r\n    return `cmyk(${cyan}%,${magenta}%,${yellow}%,${black}%)`;\r\n  }\r\n  get components(): number[] {\r\n    const { cyan, magenta, yellow, black, alpha } = this;\r\n    return [cyan, magenta, yellow, black, alpha];\r\n  }\r\n}\r\n\r\ninterface ColorParser {\r\n  color: HSLColor | RGBColor | HEXColor | CMYKColor;\r\n}\r\n\r\nexport interface ColorParserSchema extends ColorParser {}\r\n\r\nclass ColorParser implements ColorParser {\r\n  private invalidColorMessage: string =\r\n    \"InvalidColorError: Color must be expressed only in the following color formats: cmyk,rgba?,hex or hsla?\";\r\n\r\n  private validateHEX(color: string): boolean {\r\n    const resumedHEX = /^#[0-9a-fA-F]{3,4}$/;\r\n    const fullHEX = /^#[0-9a-fA-F]{6,8}$/;\r\n\r\n    if ([4, 5, 7, 9].includes(color.length)) {\r\n      return resumedHEX.test(color) || fullHEX.test(color);\r\n    }\r\n    return false;\r\n  }\r\n  private validateHSL(color: string): boolean {\r\n    // hsl(30deg,100%,50%);\r\n    // hsla(20deg,100%,50%,45%);\r\n\r\n    const onlyHSL = /^hsl\\((?:\\d{1,3}deg)(?:,\\d{1,3}%){2}\\)$/;\r\n    const onlyHSLA = /^hsla\\((?:\\d{1,3}deg)(?:,\\d{1,3}%){3}\\)$/;\r\n\r\n    return onlyHSL.test(color) || onlyHSLA.test(color);\r\n  }\r\n  private validateRGB(color: string): boolean {\r\n    // rgb(255,255,255);\r\n    // rgba(255,255,255,0.5);\r\n\r\n    const onlyRGB = /^rgb\\((?:\\d{1,3},?){3}\\)$/;\r\n    const onlyRGBA = /^rgba\\((?:\\d{1,3},){3}(?:[0-1]\\.\\d+)\\)$/;\r\n\r\n    return onlyRGB.test(color) || onlyRGBA.test(color);\r\n  }\r\n  private validateCMYK(color: string): boolean {\r\n    const regex = /^cmyk\\((?:\\d{1,3}%,?){4}\\)$/;\r\n\r\n    return regex.test(color);\r\n  }\r\n  static splitHSL(color: string): HSLColor {\r\n    const regex = /\\((.+)\\)/;\r\n    const match = color.match(regex) as RegExpMatchArray;\r\n\r\n    let [hue, saturation, lightness, alpha] = match[1]\r\n      .split(\",\")\r\n      .map((item) => parseFloat(item));\r\n    alpha = isNaN(alpha) ? 0 : alpha / 100;\r\n\r\n    if (typeof alpha === \"number\") {\r\n      return new HSLColor(hue, saturation, lightness, alpha);\r\n    } else {\r\n      return new HSLColor(hue, saturation, lightness);\r\n    }\r\n  }\r\n  static splitHEX(color: string): HEXColor {\r\n    color = color.slice(1);\r\n    const colorComponents = [];\r\n\r\n    if ([3, 4].includes(color.length)) {\r\n      let extended = \"\";\r\n      for (let i of color) {\r\n        extended += i.repeat(2);\r\n      }\r\n      color = extended;\r\n    }\r\n\r\n    for (let i = 0; i < color.length; i += 2) {\r\n      const component = color.slice(i, i + 2);\r\n      colorComponents.push(parseInt(component, 16));\r\n    }\r\n\r\n    let [red, green, blue, alpha] = colorComponents;\r\n    alpha = isNaN(alpha) ? 0 : alpha / 100;\r\n\r\n    if (typeof alpha === \"number\") {\r\n      alpha /= 255;\r\n      return new HEXColor(red, green, blue, alpha);\r\n    } else {\r\n      return new HEXColor(red, green, blue);\r\n    }\r\n  }\r\n  static splitRGB(color: string): RGBColor {\r\n    const regex = /\\((.+)\\)/;\r\n    const match = color.match(regex) as RegExpMatchArray;\r\n\r\n    let [red, green, blue, alpha] = match[1]\r\n      .split(\",\")\r\n      .map((item) => parseFloat(item));\r\n\r\n    alpha = isNaN(alpha) ? 0 : alpha / 100;\r\n\r\n    if (typeof alpha === \"number\") {\r\n      return new RGBColor(red, green, blue, alpha);\r\n    } else {\r\n      return new RGBColor(red, green, blue);\r\n    }\r\n  }\r\n  static splitCMYK(color: string): CMYKColor {\r\n    const regex = /\\((.+)\\)/;\r\n    const match = color.match(regex) as RegExpMatchArray;\r\n\r\n    let [cyan, magenta, yellow, black, alpha] = match[1]\r\n      .split(\",\")\r\n      .map((item) => parseFloat(item));\r\n\r\n    alpha = isNaN(alpha) ? 0 : alpha / 100;\r\n\r\n    if (typeof alpha === \"number\") {\r\n      return new CMYKColor(cyan, magenta, yellow, black);\r\n    } else {\r\n      return new CMYKColor(cyan, magenta, yellow, black, alpha);\r\n    }\r\n  }\r\n\r\n  private hueToRGB(p: number, q: number, t: number): number {\r\n    if (t < 0) t += 1;\r\n    if (t > 1) t -= 1;\r\n    if (t < 1 / 6) return p + (q - p) * 6 * t;\r\n    if (t < 1 / 2) return q;\r\n    if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\r\n    return p;\r\n  }\r\n\r\n  private HSLtoRGB(\r\n    hue: number,\r\n    saturation: number,\r\n    lightness: number\r\n  ): RGBColor {\r\n    let red: number = 0;\r\n    let green: number = 0;\r\n    let blue: number = 0;\r\n\r\n    hue /= 360;\r\n    saturation /= 100;\r\n    lightness /= 100;\r\n\r\n    if (saturation === 0) {\r\n      red = green = blue = lightness;\r\n    } else {\r\n      let q =\r\n        lightness < 0.5\r\n          ? lightness * (1 + saturation)\r\n          : lightness + saturation - lightness * saturation;\r\n      let p = 2 * lightness - q;\r\n      red = this.hueToRGB(p, q, hue + 1 / 3);\r\n      green = this.hueToRGB(p, q, hue);\r\n      blue = this.hueToRGB(p, q, hue - 1 / 3);\r\n    }\r\n\r\n    red = Math.round(red * 255);\r\n    green = Math.round(green * 255);\r\n    blue = Math.round(blue * 255);\r\n\r\n    return new RGBColor(red, green, blue, this.color.alpha);\r\n  }\r\n  private RGBtoHSL(red: number, green: number, blue: number): HSLColor {\r\n    red /= 255;\r\n    green /= 255;\r\n    blue /= 255;\r\n\r\n    let max = Math.max(red, green, blue);\r\n    let min = Math.min(red, green, blue);\r\n\r\n    let h: number = (max + min) / 2;\r\n    let s: number = (max + min) / 2;\r\n    let l: number = (max + min) / 2;\r\n\r\n    if (max === min) {\r\n      h = s = 0; // achromatic\r\n    } else {\r\n      let d = max - min;\r\n      s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\r\n      switch (max) {\r\n        case red:\r\n          h = (green - blue) / d + (green < blue ? 6 : 0);\r\n          break;\r\n        case green:\r\n          h = (blue - red) / d + 2;\r\n          break;\r\n        case blue:\r\n          h = (red - green) / d + 4;\r\n          break;\r\n      }\r\n      h /= 6;\r\n    }\r\n\r\n    h = parseInt((h * 360).toString());\r\n    s = Math.round(s * 100);\r\n    l = Math.round(l * 100);\r\n\r\n    return new HSLColor(h, s, l, this.color.alpha);\r\n  }\r\n  private RGBtoCMYK(red: number, green: number, blue: number): CMYKColor {\r\n    let black = 1 - Math.max(red, green, blue) / 255;\r\n    let cyan = (1 - red / 255 - black) / (1 - black);\r\n    let magenta = (1 - green / 255 - black) / (1 - black);\r\n    let yellow = (1 - blue / 255 - black) / (1 - black);\r\n\r\n    cyan = isNaN(cyan) ? 0 : cyan;\r\n    magenta = isNaN(magenta) ? 0 : magenta;\r\n    yellow = isNaN(yellow) ? 0 : yellow;\r\n    black = isNaN(black) ? 0 : black;\r\n\r\n    cyan = Math.round(cyan * 100);\r\n    magenta = Math.round(magenta * 100);\r\n    yellow = Math.round(yellow * 100);\r\n    black = Math.round(black * 100);\r\n\r\n    return new CMYKColor(cyan, magenta, yellow, black, this.color.alpha);\r\n  }\r\n\r\n  private CMYKtoRGB(\r\n    cyan: number,\r\n    magenta: number,\r\n    yellow: number,\r\n    black: number\r\n  ): RGBColor {\r\n    let red = 255 * (1 - cyan / 100) * (1 - black / 100);\r\n    let green = 255 * (1 - magenta / 100) * (1 - black / 100);\r\n    let blue = 255 * (1 - yellow / 100) * (1 - black / 100);\r\n\r\n    return new RGBColor(red, green, blue, this.color.alpha);\r\n  }\r\n\r\n  constructor(color: string | RGBColor | CMYKColor | HSLColor | HEXColor) {\r\n    if (typeof color === \"string\") {\r\n      if (this.validateHEX(color)) {\r\n        this.color = ColorParser.splitHEX(color);\r\n      } else if (this.validateCMYK(color)) {\r\n        this.color = ColorParser.splitCMYK(color);\r\n      } else if (this.validateRGB(color)) {\r\n        this.color = ColorParser.splitRGB(color);\r\n      } else if (this.validateHSL(color)) {\r\n        this.color = ColorParser.splitHSL(color);\r\n      }\r\n    } else {\r\n      this.color = color;\r\n    }\r\n  }\r\n\r\n  get hsl(): HSLColor {\r\n    if (this.color instanceof HSLColor) {\r\n      return this.color;\r\n    } else if (\r\n      this.color instanceof RGBColor ||\r\n      this.color instanceof HEXColor\r\n    ) {\r\n      const { red, green, blue } = this.color;\r\n      return this.RGBtoHSL(red, green, blue);\r\n    } else if (this.color instanceof CMYKColor) {\r\n      const { cyan, magenta, yellow, black } = this.color;\r\n      const { red, green, blue } = this.CMYKtoRGB(cyan, magenta, yellow, black);\r\n      return this.RGBtoHSL(red, green, blue);\r\n    }\r\n    return new HSLColor(0, 100, 50);\r\n  }\r\n\r\n  get rgb(): RGBColor {\r\n    if (this.color instanceof RGBColor) {\r\n      return this.color;\r\n    } else if (this.color instanceof HEXColor) {\r\n      const { red, green, blue, alpha } = this.color;\r\n      return new RGBColor(red, green, blue, alpha);\r\n    } else if (this.color instanceof HSLColor) {\r\n      const { hue, saturation, lightness } = this.color;\r\n      const result = this.HSLtoRGB(hue, saturation, lightness);\r\n      return result;\r\n    } else if (this.color instanceof CMYKColor) {\r\n      const { cyan, magenta, yellow, black } = this.color;\r\n      const result = this.CMYKtoRGB(cyan, magenta, yellow, black);\r\n      return result;\r\n    }\r\n    return new RGBColor(255, 255, 255, 0.5);\r\n  }\r\n\r\n  get hex(): HEXColor {\r\n    if (this.color instanceof HEXColor) {\r\n      return this.color;\r\n    } else if (this.color instanceof RGBColor) {\r\n      let { red, green, blue, alpha } = this.color;\r\n\r\n      return new HEXColor(red, green, blue, alpha);\r\n    } else if (this.color instanceof HSLColor) {\r\n      let { hue, saturation, lightness } = this.color;\r\n      let { red, green, blue, alpha } = this.HSLtoRGB(\r\n        hue,\r\n        saturation,\r\n        lightness\r\n      );\r\n\r\n      return new HEXColor(red, green, blue, alpha);\r\n    } else if (this.color instanceof CMYKColor) {\r\n      const { cyan, magenta, yellow, black } = this.color;\r\n      const { red, green, blue, alpha } = this.CMYKtoRGB(\r\n        cyan,\r\n        magenta,\r\n        yellow,\r\n        black\r\n      );\r\n\r\n      return new HEXColor(red, green, blue, alpha);\r\n    }\r\n\r\n    return new HEXColor(255, 125, 255, 255);\r\n  }\r\n\r\n  get cmyk(): CMYKColor {\r\n    if (this.color instanceof CMYKColor) {\r\n      return this.color;\r\n    } else if (\r\n      this.color instanceof RGBColor ||\r\n      this.color instanceof HEXColor\r\n    ) {\r\n      const { red, green, blue } = this.color;\r\n      return this.RGBtoCMYK(red, green, blue);\r\n    } else if (this.color instanceof HSLColor) {\r\n      const { hue, saturation, lightness } = this.color;\r\n      const { red, green, blue } = this.HSLtoRGB(hue, saturation, lightness);\r\n      return this.RGBtoCMYK(red, green, blue);\r\n    }\r\n    return new CMYKColor(0, 0, 0, 100, 100);\r\n  }\r\n}\r\n\r\nexport default ColorParser;\r\n\r\nexport { RGBColor, HEXColor, HSLColor, CMYKColor };\r\n","import \"./ContentExample.scss\";\r\nimport ColorParser from \"classes/ColorParser\";\r\n\r\ntype Props = {\r\n  color: string;\r\n};\r\n\r\nfunction ContentExample({ color }: Props) {\r\n  return (\r\n    <div className=\"content__example\">\r\n      <div\r\n        className=\"example__preview\"\r\n        style={{\r\n          background: color.startsWith(\"cmyk\")\r\n            ? new ColorParser(color).rgb.toString()\r\n            : color,\r\n        }}\r\n      ></div>\r\n      <div className=\"example__text\">{color}</div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContentExample;\r\n","import \"./ContentBlock.scss\";\r\nimport React, { useRef, useEffect } from \"react\";\r\n\r\nimport ContentExample from \"components/Frame/ContentExample/ContentExample\";\r\nimport { Content } from \"data/PageText\";\r\n\r\nimport ReactMarkdown from \"react-markdown\";\r\n\r\ntype Props = {\r\n  data: Content;\r\n};\r\n\r\nfunction ContentBlock({ data }: Props) {\r\n  const contentRef = useRef<HTMLParagraphElement>(null);\r\n\r\n  const { title, main, prevs } = data;\r\n\r\n  useEffect(() => {\r\n    if (contentRef.current) {\r\n      const { current: element } = contentRef;\r\n\r\n      element.innerHTML = main;\r\n    }\r\n  }, [contentRef]);\r\n\r\n  return (\r\n    <div className=\"content__block\">\r\n      <ReactMarkdown>{`${title}\\n${main}`}</ReactMarkdown>\r\n      {prevs && prevs.map((item, i) => <ContentExample key={i} color={item} />)}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ContentBlock;\r\n","import { PageTextContent } from \"data/PageText\";\r\nimport ContentBlock from \"components/Frame/ContentBlock/ContentBlock\";\r\n\r\nimport \"./TextContent.scss\";\r\n\r\ntype Props = {\r\n  data: PageTextContent;\r\n};\r\n\r\nfunction TextContent({ data }: Props) {\r\n  return (\r\n    <section className=\"text-content\">\r\n      <h3 className=\"content__section-title\">{data.contentTitle}</h3>\r\n\r\n      {data &&\r\n        data.items.map((item) => <ContentBlock data={item} key={item.main} />)}\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default TextContent;\r\n","import { createContext, useEffect, useState } from \"react\";\r\n\r\ninterface ScreenDimensions {\r\n  width: number;\r\n  height: number;\r\n  readonly xsm: 0;\r\n  readonly sm: 576;\r\n  readonly md: 768;\r\n  readonly lg: 992;\r\n  readonly xlg: 1200;\r\n}\r\n\r\ninterface Context<T> {\r\n  data: T;\r\n  setData: React.Dispatch<React.SetStateAction<T>> | (() => {});\r\n}\r\n\r\nconst defaultData: ScreenDimensions = {\r\n  width: window.screen.availWidth,\r\n  height: window.screen.availHeight,\r\n  xsm: 0,\r\n  sm: 576,\r\n  md: 768,\r\n  lg: 992,\r\n  xlg: 1200,\r\n};\r\n\r\nexport const ScreenDimensionContext = createContext<Context<ScreenDimensions>>({\r\n  data: defaultData,\r\n  setData: () => {},\r\n});\r\n\r\nfunction ScreenDimensionContextProvider({ children }: any) {\r\n  const [data, setData] = useState<ScreenDimensions>(defaultData);\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"resize\", () => {\r\n      setData({\r\n        ...data,\r\n        width: window.screen.availWidth,\r\n        height: window.screen.availHeight,\r\n      });\r\n    });\r\n  }, []);\r\n\r\n  return (\r\n    <ScreenDimensionContext.Provider value={{ data, setData }}>\r\n      {children}\r\n    </ScreenDimensionContext.Provider>\r\n  );\r\n}\r\n\r\nexport default ScreenDimensionContextProvider;\r\n","\r\nexport function useColorValidator() {\r\n\r\n  function validatePercent(...values: string[]): boolean {\r\n    // Validate Percent Values\r\n    let percentExp = /^\\d{0,3}\\.?\\d*%$/;\r\n\r\n    for (let i of values) {\r\n      if (percentExp.test(i)) {\r\n        let j = parseFloat(i.replace(\"%\", \"\")).toFixed(2);\r\n        if (!(parseFloat(j) >= 0 && parseFloat(j) <= 100)) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n\r\n      } else {\r\n        return false;\r\n      }\r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n  function validateRGB(text: string): boolean {\r\n    // Validate RGB Color Strings\r\n\r\n    const reg: RegExp = /^rgba?\\(.+\\)$/i;\r\n    const regAlpha = /,\\.\\d+\\]$/g;\r\n\r\n    if (reg.test(text)) {\r\n\r\n      text = text\r\n        .replace(/^rgba?/i, \"\")\r\n        .replace(\"(\", \"[\")\r\n        .replace(\")\", \"]\")\r\n\r\n      try {\r\n\r\n        let match = text.match(regAlpha);\r\n\r\n        if (match) {\r\n\r\n          let x = match[0].replace(\".\", \"0.\");\r\n          text = text.replace(regAlpha, x);\r\n        }\r\n\r\n        const parse: number[] = JSON.parse(text);\r\n\r\n        if (parse.length !== 3 && parse.length !== 4) {\r\n          return false;\r\n        }\r\n\r\n        for (let i = 0; i < 2; i++) {\r\n          if (!(parse[i] >= 0 && parse[i] <= 255)) {\r\n            return false\r\n          }\r\n        }\r\n\r\n        if (parse.length === 4) {\r\n          if (!(parse[3] <= 1 && parse[3] >= 0)) {\r\n            return false;\r\n          }\r\n        }\r\n\r\n        return true;\r\n\r\n      } catch {\r\n        return false\r\n      }\r\n    } else {\r\n      return false\r\n    }\r\n\r\n  }\r\n\r\n  function validateHEX(text: string): boolean {\r\n    // Validdate Hex Color Strings\r\n\r\n    const reg = /#[0-9a-fA-F]{3,6}/;\r\n\r\n    if (reg.test(text)) {\r\n      return true;\r\n    }\r\n    return false\r\n  }\r\n\r\n  function validateHSL(text: string): boolean {\r\n    // Validate HSL Color Strings\r\n\r\n    const reg = /^hsla?\\(.+\\)$/i;\r\n\r\n    function validateHue(hue: string): boolean {\r\n\r\n      const reg1 = /rad$/;\r\n      const reg2 = /turn$/;\r\n      const reg3 = /deg$/;\r\n\r\n      if (reg1.test(hue)) {\r\n        let n = parseFloat(hue.replace(\"rad\", \"\"));\r\n        if (n >= -6.28 && n <= 6.28) {\r\n          return true;\r\n        }\r\n      } else if (reg2.test(hue)) {\r\n        let n = parseFloat(hue.replace(\"turn\", \"\"));\r\n        if (n >= -1 && n <= 1) {\r\n          return true\r\n        }\r\n      } else if (reg3.test(hue)) {\r\n        let n = parseFloat(hue.replace(\"deg\", \"\"));\r\n        if (n >= -360 && n <= 360) {\r\n          return true;\r\n        }\r\n      };\r\n\r\n      return false;\r\n\r\n    }\r\n\r\n    if (reg.test(text)) {\r\n      text = text\r\n        .replace(/^hsla?/i, \"\")\r\n        .replace(\"(\", \"\")\r\n        .replace(\")\", \"\");\r\n\r\n      try {\r\n        let parse = text.split(\",\");\r\n\r\n        if (!validateHue(parse[0])) {\r\n          return false;\r\n        }\r\n\r\n        parse.shift();\r\n\r\n        if (!(validatePercent(...parse))) {\r\n          return false;\r\n        }\r\n\r\n        return true;\r\n      } catch {\r\n        return false;\r\n      }\r\n\r\n    } else {\r\n      return false;\r\n    }\r\n\r\n  }\r\n\r\n  function validateCMYK(text: string): boolean {\r\n    // Validate CMYK color codes\r\n\r\n    const reg = /^cmyk\\(.+\\)$/i;\r\n\r\n    if (reg.test(text)) {\r\n      text = text\r\n        .replace(/cmyk/i, \"\")\r\n        .replace(\"(\", \"\")\r\n        .replace(\")\", \"\")\r\n\r\n      try {\r\n        let parse = text.split(\",\");\r\n\r\n        if (!(validatePercent(...parse))) {\r\n          return false;\r\n        } else {\r\n          return true;\r\n        }\r\n\r\n      } catch {\r\n        return false;\r\n\r\n      }\r\n    }\r\n\r\n    return false;\r\n\r\n  }\r\n\r\n  return {\r\n    validateRGB,\r\n    validateHEX,\r\n    validateHSL,\r\n    validateCMYK\r\n  }\r\n\r\n}","import { useCallback } from \"react\";\r\n\r\nimport { Coord } from \"../Types/GlobalTypes\";\r\n\r\nexport function useUtils() {\r\n  /* eslint-enable */\r\n  const clamp = useCallback((num: number, min: number, max: number): number => {\r\n    return Math.min(Math.max(num, min), max);\r\n  }, []);\r\n\r\n  const all = useCallback((...comparisons: any[]): boolean => {\r\n    for (let i of comparisons) {\r\n      if (!Boolean(i)) {\r\n        return false;\r\n      }\r\n    }\r\n    return true;\r\n  }, []);\r\n\r\n  const sum = useCallback((...numbers: number[]): number => {\r\n    return numbers.reduce((acc, crr) => acc + crr, 0);\r\n  }, []);\r\n\r\n  const degToRad = useCallback((deg: number) => (Math.PI / 180) * deg, []);\r\n  const radToDeg = useCallback((rad: number) => (rad * 180) / Math.PI, []);\r\n  const cartesianDistance = useCallback((p1: Coord, p2: Coord) => {\r\n    const distance: number = (p2[0] - p1[0]) ** 2 + (p2[1] - p1[1]) ** 2;\r\n    return Math.sqrt(distance);\r\n  }, []);\r\n\r\n  return { clamp, all, sum, degToRad, cartesianDistance , radToDeg};\r\n}\r\n","import React, { useState, useContext, useEffect } from \"react\";\r\nimport { ColorContext } from \"context/ColorContext\";\r\nimport { BsClipboardCheck, BsClipboardPlus } from \"react-icons/bs\";\r\n\r\nimport \"./ColorFormatBlock.scss\";\r\nimport { useColorValidator } from \"hooks/useColorValidator\";\r\nimport ColorParser from \"classes/ColorParser\";\r\n\r\ntype Props = {\r\n  color: string;\r\n  type: string;\r\n};\r\n\r\nfunction ColorFormatBlock({ color, type }: Props) {\r\n  const { setColor } = useContext(ColorContext);\r\n\r\n  const [copied, setCopied] = useState<Boolean>(false);\r\n  const [edit, setEdit] = useState<Boolean>(false);\r\n  const [newColor, setNewColor] = useState<string>(\"\");\r\n\r\n  function handleCopy(): void {\r\n    navigator.clipboard.writeText(color).then(() => {\r\n      setCopied(true);\r\n\r\n      setTimeout(() => {\r\n        setCopied(false);\r\n      }, 2000);\r\n    });\r\n  }\r\n\r\n  const { validateRGB, validateHEX, validateHSL, validateCMYK } =\r\n    useColorValidator();\r\n\r\n  function handleEdit(): void {\r\n    setEdit(true);\r\n  }\r\n\r\n  function validateColor(): void {\r\n    const test = [\r\n      validateHEX(newColor),\r\n      validateCMYK(newColor),\r\n      validateHSL(newColor),\r\n      validateRGB(newColor),\r\n    ].some((item) => item);\r\n\r\n    if (test) {\r\n      const parser = new ColorParser(newColor);\r\n      setColor({\r\n        color: parser.hsl.toString(),\r\n        modifiedBy: \"input\",\r\n      });\r\n    }\r\n\r\n    setEdit(false);\r\n    setNewColor(\"\");\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {color && (\r\n        <div className=\"color-block\">\r\n          {!edit && (\r\n            <p className=\"color-block__text\" onClick={handleEdit}>\r\n              {color}\r\n            </p>\r\n          )}\r\n\r\n          {edit && (\r\n            <input\r\n              type=\"text\"\r\n              value={newColor}\r\n              onChange={(e) => setNewColor(e.target.value)}\r\n              onBlur={validateColor}\r\n              onKeyUp={(e) => (e.key === \"Enter\" ? validateColor() : () => {})}\r\n              className=\"color-block__input\"\r\n              autoFocus\r\n            />\r\n          )}\r\n\r\n          <button className=\"color-block__copy\" onClick={handleCopy}>\r\n            {!copied && <BsClipboardPlus />}\r\n            {copied && <BsClipboardCheck className=\"copied\" />}\r\n          </button>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default ColorFormatBlock;\r\n","import React from \"react\";\r\nimport { useState, useEffect, useRef, useCallback, useContext } from \"react\";\r\nimport { HSLColor } from \"Types/PickerTypes\";\r\nimport { useUtils } from \"hooks/useUtils\";\r\nimport { PageTextContext } from \"context/PageTextContext\";\r\n\r\nimport \"./ColorStrip.scss\";\r\nimport { ScreenDimensionContext } from \"context/ScreenDimensionContext\";\r\n\r\ntype Props = {\r\n  hue: number;\r\n  setter: React.Dispatch<React.SetStateAction<HSLColor>>;\r\n  lightness: number;\r\n};\r\n\r\nfunction ColorStrip({ hue, setter, lightness }: Props) {\r\n  const stripRef = useRef<HTMLCanvasElement>(null);\r\n  const [lastClickOffset, setLastClickOffset] = useState<number>(0);\r\n  const { clamp } = useUtils();\r\n  const { data: screenWidth } = useContext(ScreenDimensionContext);\r\n\r\n  const { data } = useContext(PageTextContext);\r\n\r\n  const drawLineAtCanvas = useCallback(\r\n    (canvas: HTMLCanvasElement) => {\r\n      if (!lastClickOffset) {\r\n        return;\r\n      }\r\n      const { width, height } = canvas;\r\n      const ctx = canvas.getContext(\"2d\");\r\n      if (ctx) {\r\n        let lum =\r\n          100 -\r\n          Math.round(\r\n            (lastClickOffset /\r\n              (screenWidth.width <= screenWidth.sm ? width : height)) *\r\n              100\r\n          );\r\n\r\n        ctx.lineWidth = 2;\r\n        ctx.beginPath();\r\n        if (screenWidth.width <= screenWidth.sm) {\r\n          ctx.moveTo(lastClickOffset, 0);\r\n          ctx.lineTo(lastClickOffset, height);\r\n        } else {\r\n          ctx.moveTo(0, lastClickOffset);\r\n          ctx.lineTo(width, lastClickOffset);\r\n        }\r\n        ctx.stroke();\r\n        ctx.closePath();\r\n\r\n        lum = lum > 100 ? 100 : lum;\r\n        lum = lum < 0 ? 0 : lum;\r\n\r\n        setter((prev) => {\r\n          return {\r\n            ...prev,\r\n            lightness: clamp(lum, 0, 100),\r\n          };\r\n        });\r\n      }\r\n    },\r\n    /* eslint-disable */\r\n    [lastClickOffset, setter, screenWidth]\r\n    /*eslint-enable */\r\n  );\r\n\r\n  const drawStrip = useCallback(\r\n    (canvas: HTMLCanvasElement) => {\r\n      const { width, height } = canvas;\r\n      const ctx = canvas.getContext(\"2d\");\r\n\r\n      if (ctx) {\r\n        ctx.clearRect(0, 0, width, height);\r\n        let grad1;\r\n        if (screenWidth.width <= screenWidth.sm) {\r\n          grad1 = ctx.createLinearGradient(0, 0, width, 0);\r\n        } else {\r\n          grad1 = ctx.createLinearGradient(0, 0, 0, height);\r\n        }\r\n\r\n        for (let i = 0; i <= 0.5; i += 0.5) {\r\n          let fillColor =\r\n            screenWidth.width <= screenWidth.sm\r\n              ? `rgba(0,0,0,${1 - i * 2})`\r\n              : `rgba(255,255,255,${1 - i * 2})`;\r\n          grad1.addColorStop(i, fillColor);\r\n        }\r\n\r\n        for (let i = 0; i <= 10; i++) {\r\n          let offset = 0.5 + 0.05 * i;\r\n          let fillColor =\r\n            screenWidth.width <= screenWidth.sm\r\n              ? `rgba(255,255,255,${i / 10}`\r\n              : `rgba(0,0,0,${i / 10}`;\r\n          grad1.addColorStop(offset, fillColor);\r\n        }\r\n\r\n        ctx.fillStyle = `hsla(${hue}deg,100%,50%,100%)`;\r\n\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        ctx.fillStyle = grad1;\r\n\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        drawLineAtCanvas(canvas);\r\n      }\r\n    },\r\n    [drawLineAtCanvas, hue, screenWidth]\r\n  );\r\n\r\n  useEffect(() => {\r\n    const { current: canvas } = stripRef;\r\n\r\n    if (canvas) {\r\n      drawStrip(canvas);\r\n      const callback = (e: MouseEvent) => {\r\n        setLastClickOffset(\r\n          screenWidth.width <= screenWidth.sm ? e.offsetX : e.offsetY\r\n        );\r\n      };\r\n\r\n      canvas.addEventListener(\"mousedown\", (e) => {\r\n        callback(e);\r\n        canvas.addEventListener(\"mousemove\", callback);\r\n      });\r\n\r\n      canvas.addEventListener(\"mouseup\", (e) => {\r\n        canvas.removeEventListener(\"mousemove\", callback);\r\n      });\r\n    }\r\n  }, [hue, stripRef, lastClickOffset, drawStrip, screenWidth]);\r\n\r\n  useEffect(() => {\r\n    setLastClickOffset(lightness);\r\n  }, [lightness]);\r\n\r\n  return (\r\n    <div className=\"color-strip\">\r\n      {screenWidth.width < screenWidth.sm && (\r\n        <canvas\r\n          height=\"50\"\r\n          width=\"250\"\r\n          ref={stripRef}\r\n          className=\"color-strip__canvas\"\r\n        >\r\n          <p>{data.canvasNotSupported}</p>\r\n        </canvas>\r\n      )}\r\n      {screenWidth.width >= screenWidth.sm && (\r\n        <canvas\r\n          width=\"50\"\r\n          height=\"300\"\r\n          ref={stripRef}\r\n          className=\"color-strip__canvas\"\r\n        >\r\n          <p>{data.canvasNotSupported}</p>\r\n        </canvas>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ColorStrip;\r\n","import \"./ColorPicker.scss\";\r\nimport { useRef, useEffect, useState, useContext, useCallback } from \"react\";\r\n\r\nimport { ColorContext } from \"context/ColorContext\";\r\n\r\nimport ColorStrip from \"../ColorStrip/ColorStrip\";\r\nimport { canvasOBJ, HSLColor } from \"Types/PickerTypes\";\r\nimport { useUtils } from \"hooks/useUtils\";\r\nimport ColorParser from \"classes/ColorParser\";\r\nimport { PageTextContext } from \"context/PageTextContext\";\r\nimport { ScreenDimensionContext } from \"context/ScreenDimensionContext\";\r\n\r\nfunction ColorPicker() {\r\n  const pickerRef = useRef<HTMLCanvasElement>(null);\r\n  const [color, setColor] = useState<HSLColor>({\r\n    hue: 0,\r\n    saturation: 100,\r\n    lightness: 50,\r\n  });\r\n  const [lum, setLum] = useState<number>(150);\r\n  const { color: selectedColor, setColor: setSelectedColor } =\r\n    useContext(ColorContext);\r\n  const { clamp } = useUtils();\r\n\r\n  const { data } = useContext(PageTextContext);\r\n  const { data: screenWidth } = useContext(ScreenDimensionContext);\r\n\r\n  const drawCanvas = useCallback(() => {\r\n    const { current: canvas } = pickerRef;\r\n\r\n    if (canvas) {\r\n      const ctx = canvas.getContext(\"2d\");\r\n      const { width, height } = canvas;\r\n\r\n      if (ctx) {\r\n        ctx.clearRect(0, 0, width, height);\r\n\r\n        const gradBlack = ctx.createLinearGradient(0, 0, 0, height);\r\n\r\n        for (let i = 0; i <= 1; i += 0.1) {\r\n          if (i < 1.1) {\r\n            gradBlack.addColorStop(i, `rgba(128,128,128,${i})`);\r\n          }\r\n        }\r\n\r\n        const grad = ctx.createLinearGradient(0, 0, width, 0);\r\n\r\n        grad.addColorStop(0, \"#f00\");\r\n        grad.addColorStop(1 / 6, \"#ff0\");\r\n        grad.addColorStop((1 / 6) * 2, \"#0f0\");\r\n        grad.addColorStop((1 / 6) * 3, \"#0ff\");\r\n        grad.addColorStop((1 / 6) * 4, \"#00f\");\r\n        grad.addColorStop((1 / 6) * 5, \"#f0f\");\r\n        grad.addColorStop((1 / 6) * 6, \"#f00\");\r\n\r\n        ctx.fillStyle = grad;\r\n        ctx.fillRect(0, 0, width, height);\r\n\r\n        ctx.fillStyle = gradBlack;\r\n\r\n        ctx.fillRect(0, 0, width, height);\r\n      }\r\n    }\r\n  }, [pickerRef]);\r\n\r\n  const drawCircle = useCallback(\r\n    (e: MouseEvent | canvasOBJ) => {\r\n      if (e.target instanceof HTMLCanvasElement) {\r\n        const canvas = e.target;\r\n        const { width, height } = canvas;\r\n        const ctx = canvas.getContext(\"2d\");\r\n\r\n        if (ctx) {\r\n          ctx.clearRect(0, 0, width, height);\r\n          drawCanvas();\r\n\r\n          ctx.lineWidth = 2;\r\n\r\n          let hue = (e.offsetX / width) * 100;\r\n          hue = Math.round((360 / 100) * hue);\r\n          let sat = 100 - Math.round((e.offsetY / height) * 100);\r\n\r\n          // ctx.strokeStyle = \"#FF00FF\";\r\n          ctx.beginPath();\r\n          ctx.arc(e.offsetX, e.offsetY, 5, 0, Math.PI * 2);\r\n          ctx.stroke();\r\n          ctx.closePath();\r\n          setColor((prev) => {\r\n            return {\r\n              ...prev,\r\n              hue: clamp(hue, 0, 360),\r\n              saturation: clamp(sat, 0, 100),\r\n            };\r\n          });\r\n        }\r\n      }\r\n    },\r\n    /* eslint-disable */\r\n    [setColor, drawCanvas]\r\n    /* eslint-enable */\r\n  );\r\n\r\n  const mountColor = useCallback(() => {\r\n    setSelectedColor({\r\n      color: `hsl(${color.hue}deg,${color.saturation}%,${color.lightness}%)`,\r\n      modifiedBy: \"click\",\r\n    });\r\n  }, [setSelectedColor, color]);\r\n\r\n  useEffect(() => {\r\n    const { current: canvas } = pickerRef;\r\n    if (selectedColor.modifiedBy !== \"input\") {\r\n      return;\r\n    }\r\n\r\n    if (canvas) {\r\n      const { width, height } = canvas;\r\n      let [hue, sat, lum] = new ColorParser(selectedColor.color).hsl.components;\r\n\r\n      let xPercent = Math.round((hue / 360) * 100);\r\n      let x = (width / 100) * xPercent;\r\n\r\n      let yPercent = Math.round((height / 100) * sat);\r\n      let y = height - yPercent;\r\n\r\n      let lumPercent = Math.round((height / 100) * lum);\r\n      let lumY = height - lumPercent;\r\n\r\n      if (pickerRef.current) {\r\n        drawCircle({\r\n          target: pickerRef.current,\r\n          offsetX: x,\r\n          offsetY: y,\r\n        });\r\n      }\r\n\r\n      setLum(lumY);\r\n    }\r\n  }, [selectedColor, pickerRef, drawCircle]);\r\n\r\n  useEffect(() => {\r\n    const { current: canvas } = pickerRef;\r\n\r\n    if (canvas) {\r\n      drawCanvas();\r\n      const callback = () => {\r\n        canvas.removeEventListener(\"mousemove\", drawCircle);\r\n      };\r\n\r\n      canvas.addEventListener(\"mousedown\", (e) => {\r\n        drawCircle(e);\r\n        canvas.addEventListener(\"mousemove\", drawCircle);\r\n      });\r\n      canvas.addEventListener(\"mouseup\", callback);\r\n      canvas.addEventListener(\"mouseout\", callback);\r\n    }\r\n  }, [pickerRef, drawCanvas, drawCircle]);\r\n\r\n  useEffect(() => {\r\n    mountColor();\r\n  }, [color, mountColor]);\r\n\r\n  return (\r\n    <section className=\"color-picker\">\r\n      <div className=\"color-picker__picker\">\r\n        {screenWidth.width < screenWidth.sm && (\r\n          <canvas\r\n            className=\"color-picker__canvas\"\r\n            ref={pickerRef}\r\n            width=\"250\"\r\n            height=\"250\"\r\n          >\r\n            <p>{data.canvasNotSupported}</p>\r\n          </canvas>\r\n        )}\r\n        {screenWidth.width >= screenWidth.sm && (\r\n          <canvas\r\n            className=\"color-picker__canvas\"\r\n            ref={pickerRef}\r\n            width=\"300\"\r\n            height=\"300\"\r\n          >\r\n            <p>{data.canvasNotSupported}</p>\r\n          </canvas>\r\n        )}\r\n        <ColorStrip hue={color.hue} setter={setColor} lightness={lum} />\r\n      </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nexport default ColorPicker;\r\n","import { ColorContext } from \"context/ColorContext\";\r\n\r\nimport {\r\n  useContext,\r\n  useState,\r\n  ChangeEvent,\r\n  useCallback,\r\n  useEffect,\r\n} from \"react\";\r\n\r\nimport \"./AlphaChanger.scss\";\r\nimport { useUtils } from \"hooks/useUtils\";\r\nimport ColorParser from \"classes/ColorParser\";\r\nimport { PageTextContext } from \"context/PageTextContext\";\r\n\r\nfunction AlphaChanger() {\r\n  const { color, setColor } = useContext(ColorContext);\r\n  const { clamp } = useUtils();\r\n  const [alpha, setAlpha] = useState<string>(\"1\");\r\n  const [alphaColor, setAlphaColor] = useState<string>(color.color);\r\n\r\n  const { data } = useContext(PageTextContext);\r\n\r\n  const formatAlpha = useCallback(\r\n    (e: ChangeEvent) => {\r\n      const { target: input } = e;\r\n      if (input instanceof HTMLInputElement) {\r\n        const { value: alpha } = input;\r\n        let a = clamp(parseFloat(alpha), 0, 1);\r\n\r\n        a = isNaN(a) ? 0 : a;\r\n\r\n        const parser = new ColorParser(color.color);\r\n        let formatted = parser.hsl;\r\n\r\n        formatted.alpha = a;\r\n\r\n        setColor({\r\n          color: formatted.toString(),\r\n          modifiedBy: \"alpha\",\r\n        });\r\n        setAlpha(alpha);\r\n        setAlphaColor(formatted.toString());\r\n      }\r\n    },\r\n    /* eslint-disable */\r\n    [color]\r\n    /* eslint-enable */\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (color.modifiedBy !== \"alpha\") {\r\n      setAlphaColor(color.color);\r\n    }\r\n  }, [color]);\r\n\r\n  return (\r\n    <div className=\"alpha-changer\">\r\n      <div className=\"alpha-changer__preview\">\r\n        <p>{data.converterPage.alphaText}</p>\r\n        <div\r\n          className=\"color-preview\"\r\n          style={{ backgroundColor: alphaColor }}\r\n        ></div>\r\n      </div>\r\n      <input\r\n        type=\"number\"\r\n        value={alpha}\r\n        onChange={formatAlpha}\r\n        placeholder=\"Alpha...\"\r\n        className=\"alpha-changer__input\"\r\n        min={0}\r\n        max={1}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AlphaChanger;\r\n","import { useContext } from \"react\";\r\n\r\nimport ColorFormatBlock from \"../../components/ColorConverterPage/ColorFormatBlock/ColorFormatBlock\";\r\nimport ColorPicker from \"../../components/ColorConverterPage/ColorPicker/ColorPicker\";\r\nimport { ColorContext } from \"../../context/ColorContext\";\r\nimport AlphaChanger from \"../../components/ColorConverterPage/AlphaChanger/AlphaChanger\";\r\n\r\nimport ColorParser from \"classes/ColorParser\";\r\nimport { PageTextContext } from \"context/PageTextContext\";\r\nimport ScreenDimensionContextProvider from \"../../context/ScreenDimensionContext\";\r\nimport TextContent from \"../../components/Frame/TextContent/TextContent\";\r\n\r\nimport \"./ColorConverter.scss\";\r\nfunction ColorConverter() {\r\n  const { color } = useContext(ColorContext);\r\n  const { data } = useContext(PageTextContext);\r\n\r\n  const parser = new ColorParser(color.color);\r\n\r\n  return (\r\n    <div className=\"converter\">\r\n      <section className=\"converter__main\">\r\n        <h2 className=\"color-picker__title\">{data.converterPage.title}</h2>\r\n\r\n        <div className=\"converter__container\">\r\n          <ScreenDimensionContextProvider>\r\n            <div className=\"main__color-picker\">\r\n              <ColorPicker />\r\n            </div>\r\n          </ScreenDimensionContextProvider>\r\n\r\n          <div className=\"main__blocks\">\r\n            <ColorFormatBlock color={parser.rgb.toString()} type=\"rgb\" />\r\n            <ColorFormatBlock color={parser.hex.toString()} type=\"hex\" />\r\n            <ColorFormatBlock color={color.color} type=\"hsl\" />\r\n            <ColorFormatBlock color={parser.cmyk.toString()} type=\"cmyk\" />\r\n          </div>\r\n\r\n          <AlphaChanger />\r\n        </div>\r\n        <p>{data.converterPage.warning}</p>\r\n      </section>\r\n\r\n      <TextContent data={data.converterPage.textContent} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ColorConverter;\r\n"],"names":["Color","_classCallCheck","_createClass","key","value","num","min","max","Math","RGBColor","_Color","_inherits","_super","_createSuper","red","green","blue","_this","alpha","arguments","length","undefined","call","clamp","this","concat","get","HEXColor","_RGBColor","_super2","hex","_i","_arr","parsed","toString","padStart","parseInt","HSLColor","_Color2","_super3","hue","saturation","lightness","_this2","CMYKColor","_Color3","_super4","cyan","magenta","yellow","black","_this3","ColorParser","color","invalidColorMessage","validateHEX","splitHEX","validateCMYK","splitCMYK","validateRGB","splitRGB","validateHSL","splitHSL","includes","test","p","q","t","hueToRGB","round","h","s","l","d","isNaN","_this$color","RGBtoHSL","_this$color2","_this$CMYKtoRGB","CMYKtoRGB","_this$color3","_this$color4","HSLtoRGB","_this$color5","_this$color6","_this$color7","_this$HSLtoRGB","_this$color8","_this$CMYKtoRGB2","_this$color9","RGBtoCMYK","_this$color10","_this$HSLtoRGB2","_match$1$split$map","match","split","map","item","parseFloat","_match$1$split$map2","_slicedToArray","slice","colorComponents","_step","extended","_iterator","_createForOfIteratorHelper","n","done","repeat","err","e","f","i","component","push","_match$1$split$map3","_match$1$split$map4","_match$1$split$map5","_match$1$split$map6","_ref","_jsxs","className","children","_jsx","style","background","startsWith","rgb","data","contentRef","useRef","title","main","prevs","useEffect","current","innerHTML","ReactMarkdown","ContentExample","contentTitle","items","ContentBlock","defaultData","width","window","screen","availWidth","height","availHeight","xsm","sm","md","lg","xlg","ScreenDimensionContext","createContext","setData","_useState","useState","_useState2","addEventListener","_objectSpread","Provider","useColorValidator","validatePercent","percentExp","_len","values","Array","_key","_values","j","replace","toFixed","text","regAlpha","x","parse","JSON","_unused","validateHue","shift","apply","_toConsumableArray","_unused2","_unused3","useUtils","useCallback","all","comparisons","_comparisons","Boolean","sum","_len2","numbers","_key2","reduce","acc","crr","degToRad","deg","PI","radToDeg","rad","cartesianDistance","p1","p2","distance","pow","sqrt","setColor","type","useContext","ColorContext","copied","setCopied","_useState3","_useState4","edit","setEdit","_useState5","_useState6","newColor","setNewColor","_useColorValidator","validateColor","some","parser","hsl","modifiedBy","_Fragment","onClick","onChange","target","onBlur","onKeyUp","autoFocus","navigator","clipboard","writeText","then","setTimeout","BsClipboardPlus","BsClipboardCheck","setter","stripRef","lastClickOffset","setLastClickOffset","screenWidth","PageTextContext","drawLineAtCanvas","canvas","ctx","getContext","lum","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","prev","drawStrip","grad1","clearRect","createLinearGradient","fillColor","addColorStop","offset","fillStyle","fillRect","callback","offsetX","offsetY","removeEventListener","ref","canvasNotSupported","pickerRef","setLum","_useContext","selectedColor","setSelectedColor","drawCanvas","gradBlack","grad","drawCircle","HTMLCanvasElement","sat","arc","mountColor","_ColorParser$hsl$comp","components","y","lumY","ColorStrip","setAlpha","alphaColor","setAlphaColor","formatAlpha","input","HTMLInputElement","a","formatted","converterPage","alphaText","backgroundColor","placeholder","ScreenDimensionContextProvider","ColorPicker","ColorFormatBlock","cmyk","AlphaChanger","warning","TextContent","textContent"],"sourceRoot":""}